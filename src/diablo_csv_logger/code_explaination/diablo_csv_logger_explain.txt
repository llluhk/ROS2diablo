#include "rclcpp/rclcpp.hpp"
#include "rclcpp/qos.hpp"
#include <sensor_msgs/msg/imu.hpp>
#include "motion_msgs/msg/leg_motors.hpp"
#include "motion_msgs/msg/motion_ctrl.hpp"
#include "ception_msgs/msg/imu_euler.hpp"
#include <fstream>
#include <iomanip>
#include <mutex>
#include <sstream>
#include <chrono>
#include <ctime>
#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>

class DataSubscriberNode : public rclcpp::Node
{
public:
    DataSubscriberNode()
    : Node("data_subscriber_node"), motion_ctrl_received_(false)
    {
        RCLCPP_INFO(this->get_logger(), "DataSubscriberNode constructed");
    }

    ~DataSubscriberNode()
    {
        RCLCPP_INFO(this->get_logger(), "Destroying DataSubscriberNode");
        std::lock_guard<std::mutex> lock(file_mutex_);
        if (data_file_.is_open()) {
            data_file_.close();
            RCLCPP_INFO(this->get_logger(), "CSV file closed");
        }
    }
    ##############
DataSubscriberNode:
    继承 rclcpp::Node，创建一个 ROS 2 节点。
构造函数 DataSubscriberNode():
    初始化节点名称为 data_subscriber_node。
    初始化标志位 motion_ctrl_received_，表示是否接收到 MotionCtrl 数据。
    记录日志，表明节点成功构造。
析构函数 ~DataSubscriberNode():
    关闭 CSV 文件，释放资源。
    通过 std::mutex 确保多线程环境下的文件安全。
    #############
    void init()
初始化订阅器（IMU、腿部电机数据、IMU欧拉角）。
创建时间同步器以保证三个订阅器的数据同步处理。
打开CSV文件用于记录数据。
        {
        RCLCPP_INFO(this->get_logger(), "Initializing DataSubscriberNode");

        auto qos = rclcpp::SystemDefaultsQoS();

        imu_subscriber_ = std::make_shared<message_filters::Subscriber<sensor_msgs::msg::Imu>>(
            this->shared_from_this(), "/diablo/sensor/Imu", qos.get_rmw_qos_profile());

        motors_subscriber_ = std::make_shared<message_filters::Subscriber<motion_msgs::msg::LegMotors>>(
            this->shared_from_this(), "/diablo/sensor/Motors", qos.get_rmw_qos_profile());

        imu_euler_subscriber_ = std::make_shared<message_filters::Subscriber<ception_msgs::msg::IMUEuler>>(
            this->shared_from_this(), "/diablo/sensor/ImuEuler", qos.get_rmw_qos_profile());

        using SyncPolicy = message_filters::sync_policies::ApproximateTime<
            sensor_msgs::msg::Imu,
            motion_msgs::msg::LegMotors,
            ception_msgs::msg::IMUEuler>;

        sync_ = std::make_shared<message_filters::Synchronizer<SyncPolicy>>(
            SyncPolicy(100), *imu_subscriber_, *motors_subscriber_, *imu_euler_subscriber_);

        sync_->registerCallback(std::bind(&DataSubscriberNode::syncCallback, this,
                                          std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));

        initializeCSVFile();

        motion_ctrl_subscriber_ = this->create_subscription<motion_msgs::msg::MotionCtrl>(
            "/diablo/MotionCmd", 10, std::bind(&DataSubscriberNode::motionCtrlCallback, this, std::placeholders::_1));

        // 创建定时器以 50Hz 运行
        timer_ = this->create_wall_timer(
            std::chrono::milliseconds(20),  // 每 20 毫秒调用一次
            std::bind(&DataSubscriberNode::writeToCSVAtFixedRate, this));

        RCLCPP_INFO(this->get_logger(), "DataSubscriberNode initialized successfully");
    }
###############
初始化函数：订阅IMU，Motor,IMU euler的数据，定义同步策略，注册回调函数，
private:
    using SyncPolicy = message_filters::sync_policies::ApproximateTime<
        sensor_msgs::msg::Imu,
        motion_msgs::msg::LegMotors,
        ception_msgs::msg::IMUEuler>;

    std::shared_ptr<message_filters::Subscriber<sensor_msgs::msg::Imu>> imu_subscriber_;
    std::shared_ptr<message_filters::Subscriber<motion_msgs::msg::LegMotors>> motors_subscriber_;
    std::shared_ptr<message_filters::Subscriber<ception_msgs::msg::IMUEuler>> imu_euler_subscriber_;
    rclcpp::Subscription<motion_msgs::msg::MotionCtrl>::SharedPtr motion_ctrl_subscriber_;

    std::shared_ptr<message_filters::Synchronizer<SyncPolicy>> sync_;
    motion_msgs::msg::MotionCtrl last_motion_ctrl_;
    bool motion_ctrl_received_;
    std::mutex file_mutex_;

    rclcpp::TimerBase::SharedPtr timer_;
    std::ofstream data_file_;

    void initializeCSVFile()
    {
        std::lock_guard<std::mutex> lock(file_mutex_);

        try {
            auto now = std::chrono::system_clock::now();
            auto time_t_now = std::chrono::system_clock::to_time_t(now);
            auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(
                now.time_since_epoch()) % 1000;

            std::stringstream timestamp;
            timestamp << std::put_time(std::localtime(&time_t_now), "%Y%m%d_%H%M%S")
                      << "_" << std::setfill('0') << std::setw(3) << ms.count();

            std::string full_path = "/home/pc/BA_data_record/diablo_data_" + timestamp.str() + ".csv";

            data_file_.open(full_path, std::ios::out);
            if (!data_file_.is_open()) {
                RCLCPP_ERROR(this->get_logger(), "Failed to open CSV file at %s", full_path.c_str());
                return;
            }

            data_file_ << "Unified Timestamp,"
                       << "orientation_x,orientation_y,orientation_z,orientation_w,"
                       << "angular_velocity_x,angular_velocity_y,angular_velocity_z,"
                       << "linear_acceleration_x,linear_acceleration_y,linear_acceleration_z,"
                       << "left_hip_enc_rev,left_hip_pos,left_hip_vel,left_hip_iq,"
                       << "left_knee_enc_rev,left_knee_pos,left_knee_vel,left_knee_iq,"
                       << "left_wheel_enc_rev,left_wheel_pos,left_wheel_vel,left_wheel_iq,"
                       << "right_hip_enc_rev,right_hip_pos,right_hip_vel,right_hip_iq,"
                       << "right_knee_enc_rev,right_knee_pos,right_knee_vel,right_knee_iq,"
                       << "right_wheel_enc_rev,right_wheel_pos,right_wheel_vel,right_wheel_iq,"
                       << "left_leg_length,right_leg_length,"
                       << "roll,pitch,yaw,"
                       << "forward,left,up,roll,pitch,leg_split\n";
            data_file_.flush();

            RCLCPP_INFO(this->get_logger(), "CSV file created: %s", full_path.c_str());
        } catch (const std::exception &e) {
            RCLCPP_ERROR(this->get_logger(), "Exception during CSV file initialization: %s", e.what());
        }
    }

    void motionCtrlCallback(const motion_msgs::msg::MotionCtrl::SharedPtr msg)
    实时更新运动控制命令（前进、侧移、向上等）
    {
    
        std::lock_guard<std::mutex> lock(file_mutex_);
        last_motion_ctrl_ = *msg;  // 更新 MotionCtrl 数据
        motion_ctrl_received_ = true;
        RCLCPP_INFO(this->get_logger(), "Updated MotionCtrl: forward=%.2f, left=%.2f, up=%.2f, roll=%.2f, pitch=%.2f, leg_split=%.2f",
                    last_motion_ctrl_.value.forward, last_motion_ctrl_.value.left, last_motion_ctrl_.value.up,
                    last_motion_ctrl_.value.roll, last_motion_ctrl_.value.pitch, last_motion_ctrl_.value.leg_split);
    }

    void syncCallback(
    功能：将同步后的数据记录到CSV文件中。
        const sensor_msgs::msg::Imu::ConstSharedPtr &imu_msg,
        const motion_msgs::msg::LegMotors::ConstSharedPtr &motors_msg,
        const ception_msgs::msg::IMUEuler::ConstSharedPtr &imu_euler_msg)
    {
        auto unified_timestamp = imu_msg->header.stamp;
        logToCSV(unified_timestamp, imu_msg, motors_msg, imu_euler_msg);
    }

    void writeToCSVAtFixedRate()
    {
        std::lock_guard<std::mutex> lock(file_mutex_);

        if (!motion_ctrl_received_) {
            // 如果没有新的 MotionCtrl 数据，填充默认值
            last_motion_ctrl_.value.forward = 0.0;
            last_motion_ctrl_.value.left = 0.0;
            last_motion_ctrl_.value.up = 0.0;
            last_motion_ctrl_.value.roll = 0.0;
            last_motion_ctrl_.value.pitch = 0.0;
            last_motion_ctrl_.value.leg_split = 0.0;
        }

        motion_ctrl_received_ = false;  // 重置标志位
    }

    void logToCSV(const builtin_interfaces::msg::Time &timestamp,
                  const sensor_msgs::msg::Imu::ConstSharedPtr &imu_msg,
                  const motion_msgs::msg::LegMotors::ConstSharedPtr &motors_msg,
                  const ception_msgs::msg::IMUEuler::ConstSharedPtr &imu_euler_msg)
     功能：将数据（包括IMU、电机状态、欧拉角和运动控制命令）写入CSV文件。         
    {
        (void)timestamp; 
        std::lock_guard<std::mutex> lock(file_mutex_);

        if (!data_file_.is_open()) {
            RCLCPP_ERROR(this->get_logger(), "CSV file is not open.");
            return;
        }

        // 写入 IMU 数据
        data_file_ << std::fixed << std::setprecision(6)
                   << imu_msg->orientation.x << ","
                   << imu_msg->orientation.y << ","
                   << imu_msg->orientation.z << ","
                   << imu_msg->orientation.w << ","
                   << imu_msg->angular_velocity.x << ","
                   << imu_msg->angular_velocity.y << ","
                   << imu_msg->angular_velocity.z << ","
                   << imu_msg->linear_acceleration.x << ","
                   << imu_msg->linear_acceleration.y << ","
                   << imu_msg->linear_acceleration.z << ",";

        // 写入 LegMotors 数据
        data_file_ << motors_msg->left_hip_enc_rev << ","
                   << motors_msg->left_hip_pos << ","
                   << motors_msg->left_hip_vel << ","
                   << motors_msg->left_hip_iq << ","
                   << motors_msg->left_knee_enc_rev << ","
                   << motors_msg->left_knee_pos << ","
                   << motors_msg->left_knee_vel << ","
                   << motors_msg->left_knee_iq << ","
                   << motors_msg->left_wheel_enc_rev << ","
                   << motors_msg->left_wheel_pos << ","
                   << motors_msg->left_wheel_vel << ","
                   << motors_msg->left_wheel_iq << ","
                   << motors_msg->right_hip_enc_rev << ","
                   << motors_msg->right_hip_pos << ","
                   << motors_msg->right_hip_vel << ","
                   << motors_msg->right_hip_iq << ","
                   << motors_msg->right_knee_enc_rev << ","
                   << motors_msg->right_knee_pos << ","
                   << motors_msg->right_knee_vel << ","
                   << motors_msg->right_knee_iq << ","
                   << motors_msg->right_wheel_enc_rev << ","
                   << motors_msg->right_wheel_pos << ","
                   << motors_msg->right_wheel_vel << ","
                   << motors_msg->right_wheel_iq << ","
                   << motors_msg->left_leg_length << ","
                   << motors_msg->right_leg_length << ",";

        // 写入 imu_euler 数据
        data_file_ << std::fixed << std::setprecision(6)
                   << imu_euler_msg->roll << ","
                   << imu_euler_msg->pitch << ","
                   << imu_euler_msg->yaw << ",";

        // 写入 MotionCtrl 数据
        data_file_ << std::fixed << std::setprecision(6)
                   << last_motion_ctrl_.value.forward << ","
                   << last_motion_ctrl_.value.left << ","
                   << last_motion_ctrl_.value.up << ","
                   << last_motion_ctrl_.value.roll << ","
                   << last_motion_ctrl_.value.pitch << ","
                   << last_motion_ctrl_.value.leg_split << "\n";

        data_file_.flush();
        RCLCPP_INFO(this->get_logger(), "Synchronized data written to CSV");
    }
};

int main(int argc, char **argv)
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<DataSubscriberNode>();
    node->init();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}

############################################################

时间同步器的原理输入和输出
sync_ = std::make_shared<message_filters::Synchronizer<SyncPolicy>>(
            SyncPolicy(100), *imu_subscriber_, *motors_subscriber_, *imu_euler_subscriber_);

        sync_->registerCallback(std::bind(&DataSubscriberNode::syncCallback, this,
                                          std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));
                                          
输入
header:
header.stamp = 1706438395.100   
  frame_id: "imu_frame"
orientation: [x, y, z, w]
angular_velocity: [x, y, z]
linear_acceleration: [x, y, z]
--------------------
header:
header.stamp = 1706438395.200
  frame_id: "motors_frame"
left_hip_enc_rev: <double>
left_hip_pos: <double>
left_hip_vel: <double>
left_hip_iq: <double>
...
right_leg_length: <double>
-------------------  
header:
header.stamp = 1706438395.150
  frame_id: "euler_frame"
roll: <double>
pitch: <double>
yaw: <double>

SyncPolicy(100) 表示最多可以缓存100条信息， ApproximateTime 策略的设计目标是提供宽松的对齐逻辑，无需显式设置时间误差范围。如果需要更准确的同步，可以将缓存调低如10.
较大的队列深度：
    同步器会缓存更多消息，可以容忍较大的时间差异，提高对齐的成功率。
    适合低频话题或具有较大时间戳误差的场景。
    队列过大可能导致对齐延迟（需要等待更多消息）。

较小的队列深度：
    同步器缓存的消息更少，对齐失败率会提高，可能降低实际工作频率。
    更适合高频话题且时间戳误差较小的场景。
    
如果输入话题的时间戳非常接近（误差较小），同步器几乎可以即时触发回调，接近输入最低频率。
例如，IMU、电机和欧拉角都以 50 Hz 发布，时间戳误差 < 10 ms，则同步器也以接近 50 Hz 的频率工作。
                                    
输出：
registerCallback 的作用：注册一个回调函数syncCallback，在消息成功对齐时调用。
void syncCallback(
    const sensor_msgs::msg::Imu::ConstSharedPtr &imu_msg,
    const motion_msgs::msg::LegMotors::ConstSharedPtr &motors_msg,
    const ception_msgs::msg::IMUEuler::ConstSharedPtr &imu_euler_msg);

syncCallback(
    imu_msg = {header.stamp = 1706438395.150, ...},
    motors_msg = {header.stamp = 1706438395.150, ...},
    imu_euler_msg = {header.stamp = 1706438395.150, ...});

#################    
实时更新运动控制命令
运动控制命令与传感器数据的不同步逻辑：
    运动控制命令是独立处理的，不依赖同步器。
    通过缓存最近的值，在传感器数据同步时“补充”到同步数据中。

使用最新命令：
    syncCallback 总是使用最新接收到的运动控制命令，确保数据反映最新的控制状态。

默认值兜底：

    如果在整个同步流程中没有接收到任何运动控制命令，代码会使用默认值避免记录空数据。 


