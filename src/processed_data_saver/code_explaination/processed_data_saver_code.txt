import numpy as np
from collections import deque
import rclpy
from rclpy.node import Node
from custom_msgs.msg import SyncedData  # 替换为自定义消息类型
from std_msgs.msg import Float32MultiArray  # 发布处理后的数组

class DataProcessingNode(Node):
    def __init__(self):
        super().__init__('data_processing_node')

        # 滑动时间窗配置
        self.time_window = 50  # 时间窗大小
        self.feature_dim = 33  # 原始特征维度
        self.new_feature_dim = 66 
        self.total_feature_dim = self.feature_dim + self.new_feature_dim  # 总特征维度
        self.data_buffer = deque(maxlen=self.time_window)  # 滑动窗口队列

        # 订阅 /synced_data 话题
        self.subscription = self.create_subscription(
            SyncedData,
            '/synced_data',
            self.data_callback,
            10
        )

        # 发布处理后的滑动窗口数据
        self.publisher = self.create_publisher(Float32MultiArray, '/processed_data', 10)

    def data_callback(self, msg):
        """处理 `/synced_data` 消息，确保滑动窗口满 50 条数据后才运行"""

        # 1️⃣ **提取原始特征**
        raw_features = self.extract_features(msg).reshape(1, -1)
        print(f"[INFO] raw_features.shape: {raw_features.shape}")  # **(1, 33)**

        # 2️⃣ **存入滑动窗口**
        self.data_buffer.append(raw_features)

        # 3️⃣ **等待滑动窗口满 50 条数据后再运行**
        if len(self.data_buffer) < self.time_window:
            print(f"[INFO] Waiting for buffer to fill... Current size: {len(self.data_buffer)}/{self.time_window}")
            return  # **窗口未满 50 条，直接返回，不执行计算**

        # 4️⃣ **转换 `data_buffer` 为 NumPy 数组**
        buffer_array = np.array(self.data_buffer)
        print(f"[INFO] buffer_array.shape before reshape: {buffer_array.shape}")  # **(50, 33)**

        # 5️⃣ **确保 `buffer_array` 维度正确**
        if buffer_array.size == 0:
            buffer_array = np.zeros((1, self.feature_dim))
        elif buffer_array.ndim == 1:
            buffer_array = buffer_array.reshape(-1, self.feature_dim)
        elif buffer_array.ndim == 3:
            buffer_array = buffer_array.squeeze(axis=1)

        print(f"[INFO] buffer_array.shape after reshape: {buffer_array.shape}")  # **(50, 33)**

        # 6️⃣ **计算新增特征**
        new_features = self.create_additional_features(buffer_array).reshape(1, -1)
        print(f"[INFO] new_features.shape: {new_features.shape}")  # **(1, 68)**

        # 7️⃣ **拼接 `raw_features` 和 `new_features`**
        combined_features = np.hstack((raw_features, new_features))
        print(f"[INFO] combined_features.shape: {combined_features.shape}")  # **(1, 101)**

        # 8️⃣ **发布数据**
        self.publish_single_sample(combined_features)

        # 9️⃣ **滑动窗口：只移除最旧的一条数据**
        self.data_buffer.popleft()  # **FIFO 机制，移除最早的数据**



    def extract_features(self, msg):
 
        # 提取 IMU 特征
        imu_data = [
            msg.imu.orientation.x,
            msg.imu.orientation.y,
            msg.imu.orientation.z,
            msg.imu.orientation.w,
            msg.imu.angular_velocity.x,
            msg.imu.angular_velocity.y,
            msg.imu.angular_velocity.z,
            msg.imu.linear_acceleration.x,
            msg.imu.linear_acceleration.y,
            msg.imu.linear_acceleration.z,
        ]

        # 提取 Motor 特征
        motor_data = [
            # 左髋关节

            msg.leg_motors.left_hip_vel,
            msg.leg_motors.left_hip_iq,
            # 左膝关节

            msg.leg_motors.left_knee_vel,
            msg.leg_motors.left_knee_iq,
            # 左轮

            msg.leg_motors.left_wheel_vel,
            msg.leg_motors.left_wheel_iq,
            # 右髋关节

            msg.leg_motors.right_hip_vel,
            msg.leg_motors.right_hip_iq,
            # 右膝关节

            msg.leg_motors.right_knee_vel,
            msg.leg_motors.right_knee_iq,
            # 右轮

            msg.leg_motors.right_wheel_vel,
            msg.leg_motors.right_wheel_iq,
            # 腿部长度
            msg.leg_motors.left_leg_length,
            msg.leg_motors.right_leg_length,
        ]

        # 提取欧拉角特征
        imu_euler_data = [
            msg.imu_euler.roll,
            msg.imu_euler.pitch,
            msg.imu_euler.yaw,
        ]

        # 提取运动控制特征
        motion_ctrl_data = [
            msg.motion_ctrl.value.forward,
            msg.motion_ctrl.value.left,
            msg.motion_ctrl.value.up,
            msg.motion_ctrl.value.roll,
            msg.motion_ctrl.value.pitch,
            msg.motion_ctrl.value.leg_split,
        ]

        # 合并所有特征
        features =  imu_data + motor_data + imu_euler_data + motion_ctrl_data
        assert len(features) == self.feature_dim, "特征维度不匹配！"
        return np.array(features, dtype=np.float32)  #(50,33)

################################################         feature engineering       ####################################################


    def moving_average_filter(self, data, window_size=50):
        return np.apply_along_axis(
            lambda x: np.convolve(x, np.ones(window_size) / window_size, mode='same'),
            axis=0, arr=data
        )

    def difference_filter(self, data):
        if data.shape[0] < 2:
            return np.zeros_like(data)
        return np.vstack((np.zeros((1, data.shape[1])), np.diff(data, axis=0)))

    def feature_add(self, data):

        return data[:, ::2] + data[:, 1::2]  # Sum adjacent columns row-wise

    def feature_substraction(self, data):

        return data[:, ::2] - data[:, 1::2]  # Subtract adjacent columns row-wise

    def moving_avg_square_substraction(self, data):

        return data[:, ::2]**2 - data[:, 1::2]**2  # Subtract adjacent columns row-wise

    def create_additional_features(self, data):
        selected_dim_start = 1
        dim_end = 28
        
        data_array = data[:, selected_dim_start:dim_end]

        selected_indices = [11, 17, 13, 19, 15, 21, 22, 23] 
        selected_indices_avg = [11, 17, 13, 19, 15, 21, 22, 23] 
        """创建新的特征（如滑动平均、差分、平方差等）"""



        data_left_right = data[:, selected_indices]
        smoothed_data = self.moving_average_filter(data_array, self.time_window)
        data_left_right_avg = smoothed_data[:, selected_indices_avg]

        
        diff_data = self.difference_filter(data_array)
        add_data = self.feature_add(data_left_right)
        sub_data = self.feature_substraction(data_left_right)
        avg_square_sub = self.moving_avg_square_substraction(data_left_right_avg)        # 合并新增特征
        print(f"[DEBUG] smoothed_data.shape: {smoothed_data.shape}")
        print(f"[DEBUG] diff_data.shape: {diff_data.shape}")
        print(f"[DEBUG] add_data.shape: {add_data.shape}")
        print(f"[DEBUG] sub_data.shape: {sub_data.shape}")
        print(f"[DEBUG] avg_square_sub.shape: {avg_square_sub.shape}")


        processed_data = np.hstack((smoothed_data, diff_data, add_data, sub_data, avg_square_sub))
        return processed_data[-1].reshape(1, -1) 

        
    def publish_single_sample(self, sample):
        """将单条数据发布为 Float32MultiArray (1, 54)"""
        msg = Float32MultiArray()
        msg.data = sample.flatten().tolist()
        self.publisher.publish(msg)
        self.get_logger().info(f"Published single sample with shape: (1, {self.total_feature_dim})")

def main(args=None):
    rclpy.init(args=args)
    node = DataProcessingNode()
    rclpy.spin(node)
    rclpy.shutdown()
    
if __name__ == '__main__':
    main()
