import numpy as np
from collections import deque
import rclpy
from rclpy.node import Node
from custom_msgs.msg import SyncedData  # 替换为自定义消息类型
from std_msgs.msg import Float32MultiArray  # 发布处理后的数组

class DataProcessingNode(Node):
    #继承 rclpy.node.Node，是 ROS 2 节点。
    def __init__(self):
        super().__init__('data_processing_node')
        # 初始化ROS2 处理节点，名为'data_processing_node'

        # 滑动时间窗配置
        self.time_window = 50  # 时间窗大小
        self.feature_dim = 33  # 原始特征维度
        self.new_feature_dim = 82 
        self.total_feature_dim = self.feature_dim + self.new_feature_dim  # 总特征维度
        self.data_buffer = deque(maxlen=self.time_window)  # 滑动窗口队列，使用deque维护最近50条数据，FIFO机制

        # 订阅 /synced_data 话题
        self.subscription = self.create_subscription(
            SyncedData,
            '/synced_data',
            self.data_callback,
            100
        )

        # 发布处理后的滑动窗口数据
        self.publisher = self.create_publisher(Float32MultiArray, '/processed_data', 10)

    def data_callback(self, msg):

        # 1️⃣ **提取原始特征**
        raw_features = self.extract_features(msg).reshape(1, -1)
        print(f"[INFO] raw_features.shape: {raw_features.shape}")  # **(1, 33)**
        
     
        # 6️⃣ **计算新增特征**
        new_features = self.create_additional_features(raw_features)
        print(f"[INFO] new_features.shape: {new_features.shape}")  # **(1, 115)**


        # 8️⃣ **发布数据**
        self.publish_single_sample(new_features)


    def extract_features(self, msg):
 
        # 提取 IMU 特征
        imu_data = [
            msg.imu.orientation.x,
            msg.imu.orientation.y,
            msg.imu.orientation.z,
            msg.imu.orientation.w,
            msg.imu.angular_velocity.x,
            msg.imu.angular_velocity.y,
            msg.imu.angular_velocity.z,
            msg.imu.linear_acceleration.x,
            msg.imu.linear_acceleration.y,
            msg.imu.linear_acceleration.z,
        ]

        # 提取 Motor 特征
        motor_data = [
            # 左髋关节

            msg.leg_motors.left_hip_vel,
            msg.leg_motors.left_hip_iq,
            # 左膝关节

            msg.leg_motors.left_knee_vel,
            msg.leg_motors.left_knee_iq,
            # 左轮

            msg.leg_motors.left_wheel_vel,
            msg.leg_motors.left_wheel_iq,
            # 右髋关节

            msg.leg_motors.right_hip_vel,
            msg.leg_motors.right_hip_iq,
            # 右膝关节

            msg.leg_motors.right_knee_vel,
            msg.leg_motors.right_knee_iq,
            # 右轮

            msg.leg_motors.right_wheel_vel,
            msg.leg_motors.right_wheel_iq,
            # 腿部长度
            msg.leg_motors.left_leg_length,
            msg.leg_motors.right_leg_length,
        ]

        # 提取欧拉角特征
        imu_euler_data = [
            msg.imu_euler.roll,
            msg.imu_euler.pitch,
            msg.imu_euler.yaw,
        ]

        # 提取运动控制特征
        motion_ctrl_data = [
            msg.motion_ctrl.value.forward,
            msg.motion_ctrl.value.left,
            msg.motion_ctrl.value.up,
            msg.motion_ctrl.value.roll,
            msg.motion_ctrl.value.pitch,
            msg.motion_ctrl.value.leg_split,
        ]

        # 合并所有特征
        features =  imu_data + motor_data + imu_euler_data + motion_ctrl_data
        assert len(features) == self.feature_dim, "特征维度不匹配！"
        return np.array(features, dtype=np.float32)  #（33,）
################################################         feature engineering       ####################################################


    def moving_average_filter(self, new_data):
        """增量计算滑动均值，避免重复计算"""
        if not hasattr(self, 'rolling_mean'):
            self.rolling_mean = np.zeros_like(new_data)  # ✅ 初始化

        if len(self.data_buffer) < self.time_window:
            self.rolling_mean = (self.rolling_mean * len(self.data_buffer) + new_data) / (len(self.data_buffer) + 1)
        else:
            oldest_data = self.data_buffer[0]  
            self.rolling_mean += (new_data - oldest_data) / self.time_window
            self.data_buffer.popleft()  # 移除最早数据
        
        # **更新滑动窗口**
        self.data_buffer.append(new_data)
        return self.rolling_mean  # ✅ 仅返回均值，不修改 self.data_buffer

    def difference_filter(self, prev_row, current_row):
        """实时计算一阶差分"""
        if prev_row is None:
            return np.zeros_like(current_row)
        return current_row - prev_row  # 计算相邻行的变化
        
    def feature_add(self, data):
        if data.shape[1] % 2 != 0:
            raise ValueError("Number of columns must be even.")
        return data[:, ::2] + data[:, 1::2]  # Sum adjacent columns row-wise

    def feature_substraction(self, data):
        if data.shape[1] % 2 != 0:
            raise ValueError("Number of columns must be even.")
        return data[:, ::2] - data[:, 1::2]  # Subtract adjacent columns row-wise

    def moving_avg_square_substraction(self, data):
        if data.shape[1] % 2 != 0:
            raise ValueError("Number of columns must be even.")
        return data[:, ::2]**2 - data[:, 1::2]**2  # Subtract adjacent columns row-wise

    def create_additional_features(self, data):
        selected_dim_start = 0
        dim_end = 27
        original_data=data
            
        data_array = data[:, selected_dim_start:dim_end]
        smoothed_data = self.moving_average_filter(data_array)
        selected_indices = [11, 17, 13, 19, 15, 21, 22, 23]
        if max(selected_indices) >= original_data.shape[1]:
            raise ValueError(f"Selected indices {selected_indices} exceed column limit {original_data.shape[1]}.")
        data_left_right = original_data[:, selected_indices]
        data_left_right_avg = smoothed_data[:, selected_indices]  
        
        if not hasattr(self, 'prev_row'):
            self.prev_row = None
        diff_data = self.difference_filter(self.prev_row, data_array)
        self.prev_row = data_array
        
        data_left_right_diff = diff_data[:,selected_indices]
        add_data = self.feature_add(data_left_right)
        add_soomth_data = self.feature_add(data_left_right_avg)
        add_diff_data = self.feature_add(data_left_right_diff)
        sub_data = self.feature_substraction(data_left_right)        
        sub_soomth_data = self.feature_substraction(data_left_right_avg)
        sub_diff_data = self.feature_substraction(data_left_right_diff)
        avg_square_sub = self.moving_avg_square_substraction(data_left_right_avg)


        
        processed_data = np.hstack((original_data, smoothed_data, diff_data, add_data, add_soomth_data, add_diff_data, sub_data, sub_soomth_data, sub_diff_data, avg_square_sub)).reshape(1, -1)  
            
        print(f"Shapes -> Original: {original_data.shape}, Smoothed: {smoothed_data.shape}, Diff: {diff_data.shape}, Add: {add_data.shape}, Add_smooth: {add_soomth_data.shape}, Add_diff: {add_diff_data.shape}, Sub: {sub_data.shape}, Sub_smooth:{sub_soomth_data.shape}, Sub_diff:{sub_diff_data.shape}, Avg_square:{avg_square_sub.shape}")
        return processed_data      
        
    def publish_single_sample(self, sample):
        """将单条数据发布为 Float32MultiArray (1, 54)"""
        msg = Float32MultiArray()
        msg.data = sample.flatten().tolist()
        self.publisher.publish(msg)
        self.get_logger().info(f"Published single sample with shape: {sample.shape}")
        
def main(args=None):
    rclpy.init(args=args)
    node = DataProcessingNode()
    rclpy.spin(node)
    rclpy.shutdown()
    
if __name__ == '__main__':
    main()
