import numpy as np
from collections import deque
import rclpy
from rclpy.node import Node
from custom_msgs.msg import SyncedData  # 替换为自定义消息类型
from std_msgs.msg import Float32MultiArray  # 发布处理后的数组

class DataProcessingNode(Node):
    def __init__(self):
        super().__init__('data_processing_node')

        # 滑动时间窗配置
        self.time_window = 50  # 时间窗大小
        self.feature_dim = 45  # 特征维度
        self.data_buffer = deque(maxlen=self.time_window)  # 滑动窗口队列

        # 订阅 `/synced_data` 话题
        self.subscription = self.create_subscription(
            SyncedData,
            '/synced_data',
            self.data_callback,
            10
        )

        # 发布处理后的滑动窗口数据
        self.publisher = self.create_publisher(Float32MultiArray, '/processed_data', 10)

    def data_callback(self, msg):
        # 从消息中提取需要的特征
        features = self.extract_features(msg)

        # 将提取的特征添加到滑动窗口中
        self.data_buffer.append(features)

        # 如果滑动窗口填满，则发布数据
        if len(self.data_buffer) == self.time_window:
            self.publish_window()

    def extract_features(self, msg):
        # 提取 IMU 特征
        imu_data = [
            msg.imu.orientation.x,
            msg.imu.orientation.y,
            msg.imu.orientation.z,
            msg.imu.orientation.w,
            msg.imu.angular_velocity.x,
            msg.imu.angular_velocity.y,
            msg.imu.angular_velocity.z,
            msg.imu.linear_acceleration.x,
            msg.imu.linear_acceleration.y,
            msg.imu.linear_acceleration.z,
        ]

        # 提取 Motor 特征
        motor_data = [
            # 左髋关节
            msg.leg_motors.left_hip_enc_rev,
            msg.leg_motors.left_hip_pos,
            msg.leg_motors.left_hip_vel,
            msg.leg_motors.left_hip_iq,
            # 左膝关节
            msg.leg_motors.left_knee_enc_rev,
            msg.leg_motors.left_knee_pos,
            msg.leg_motors.left_knee_vel,
            msg.leg_motors.left_knee_iq,
            # 左轮
            msg.leg_motors.left_wheel_enc_rev,
            msg.leg_motors.left_wheel_pos,
            msg.leg_motors.left_wheel_vel,
            msg.leg_motors.left_wheel_iq,
            # 右髋关节
            msg.leg_motors.right_hip_enc_rev,
            msg.leg_motors.right_hip_pos,
            msg.leg_motors.right_hip_vel,
            msg.leg_motors.right_hip_iq,
            # 右膝关节
            msg.leg_motors.right_knee_enc_rev,
            msg.leg_motors.right_knee_pos,
            msg.leg_motors.right_knee_vel,
            msg.leg_motors.right_knee_iq,
            # 右轮
            msg.leg_motors.right_wheel_enc_rev,
            msg.leg_motors.right_wheel_pos,
            msg.leg_motors.right_wheel_vel,
            msg.leg_motors.right_wheel_iq,
            # 腿部长度
            msg.leg_motors.left_leg_length,
            msg.leg_motors.right_leg_length,
        ]

        # 提取欧拉角特征
        imu_euler_data = [
            msg.imu_euler.roll,
            msg.imu_euler.pitch,
            msg.imu_euler.yaw,
        ]

        # 提取运动控制特征
        motion_ctrl_data = [
            msg.motion_ctrl.value.forward,
            msg.motion_ctrl.value.left,
            msg.motion_ctrl.value.up,
            msg.motion_ctrl.value.roll,
            msg.motion_ctrl.value.pitch,
            msg.motion_ctrl.value.leg_split,
        ]

        # 合并所有特征
        features = imu_data + motor_data + imu_euler_data + motion_ctrl_data
        assert len(features) == self.feature_dim, "特征维度不匹配！"
        return np.array(features, dtype=np.float32)

    def publish_window(self):
        # 将滑动时间窗中的数据发布为 Float32MultiArray
        window_data = np.array(self.data_buffer).flatten()  # 将数据展平为 1D 数组
        msg = Float32MultiArray()
        msg.data = window_data.tolist()  # 转换为列表形式
        self.publisher.publish(msg)
        self.get_logger().info(f"Published processed data window with shape: {window_data.shape}")

def main(args=None):
    rclpy.init(args=args)
    node = DataProcessingNode()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()

